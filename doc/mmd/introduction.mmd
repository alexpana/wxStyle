# Introducere #

Introducere de la linia de comanda la interfetele vizuale ?
Istoria interfetelor vizuale ?
Domeniul de cercetare ?

De la inceputurile revolutiei digitale si pana in anii 1980, interesul principal in dezvoltarea de aplicatii a fost utilizarea eficienta a celor mai importante resurse hardware, procesorul si memoria. Astazi, datorita costurilor scazute ale componentelor hardware si cresterea accentuata a performantelor sistemelor personale, ne permitem sa optimizam mai degraba eficienta utilizatorului.

Consideram ca este in avantajul nostru sa consumam cicluri aditionale de procesor si spatiu de memorie pentru a imbunatati experienta utilizatorilor, deoarece productivitatea si satisfactia acestora depaseste cu mult costurile modeste ale acestor resurse.

Cand o persoana porneste o aplicatie, fie ca foloseste un calculator personal sau un dispozitiv mobil, acea persoana deschide, in esenta, o conversatie. In cazul aplicatiilor de tip linie de comanda, utilizatorul "vorbeste" cu sistemul software prin comenzile pe care le introduce. Sistemul in schimb raspunde cu mesaje informative legate de starea in care se afla sau procesul pe care il desfasoara. In cazul aplicatiilor cu interfata grafica, conversatia se realizeaza sub forma metaforei interfetei grafice, prin butoane, meniuri si elemente grafice impreuna cu tehnicile de interactiune pe care utilizatorul le are la dispozitie.

Calitatea interfetei determina satisfactia consumatorului, iar astazi, avand atatea posibilitati, determina daca produsul are success sau nu pe piata. Una din metricile prin care cuantificam calitatea unei interfete, este gradul de intuitivitate. La fel cum o componenta hardware necesita o componenta software (driver) care ii expune capacitatile, la fel o interfata grafica trebuie sa expuna toate capacitatile aplicatiei intr-un mod cat mai eficient si intuitiv pentru utilizator.

Consideram ca este in avantajul nostru sa consumam cicluri aditionale de procesor si spatiu de memorie pentru a imbunatati experienta utilizatorilor, deoarece productivitatea si satisfactia acestora depaseste cu mult costurile modeste ale acestor resurse.

Printre limbajele de programare actuale C++ este unul din cele mai raspandite datorita metodelor eficiente de abstractizare dar si datorita posibilitatii de lucra la un nivel apropiat de hardware. Fiind un limbaj compilat, performantele acestuia sunt (aproape) de ne-rivalizat. Din nefericire, standardul libajului C++ nu descrie o librarie de componente vizuale, iar scrierea de programe cu interfete vizuale este ingreunata de multiplele platforme ce trebuiesc suportate. De la sistemele de operare desktop, pana la mobile, fiecare platforma implementeaza si ofera API-uri diferite pentru construirea de interfete vizuale. Pentru a scrie programe portabile, este deci necesara implementarea separata a componentei de UI pentru fiecare platforma. 

// Din fericire, acest lucru este deja realizat de cateva librarii.

Librariile wxWidgets si Qt sunt singurele librarii portabile care ofera un API uniform pentru toate platformele. Acestea sunt suficient de mature si complete pentru a fi mentionate in cartea de referinta a limbajului C++ "The C++ Programming Language" scrisa de Bjarne Stroustrup. Printre diferentele dintre librarii se numara gradul de maturitate, Qt fiind mult mai bine dezvoltata si licenta oferita, Qt necesitand o licenta comerciala pentru linkuirea statica. Asemanarile constau in portabilitate si paradigma OOP folosita de ambele librarii.

O alta diferenta dintre cele doua librarii este gradul de stilizare al componentelor. Libraria Qt ofera acces usor la procesul de randare prin metode virtuale. Mai mult, Qt ofera posibilitatea stilizarii componentelor folosind un subset al limbajului CSS. Libraria wxWidgets prefera sa delege toata responsabilitatea randarii sistemului de operare.
